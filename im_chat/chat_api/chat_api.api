syntax = "v1"

type ChatHistoryRequest {
	UserID   uint `header:"User-ID"`
	page     int  `form:"page,optional"`
	limit    int  `form:"limit,optional"`
	FriendID uint `form:"friendID"` // 好友ID
}

type ChatHistoryResponse {
	ID        uint   `json:"id"`
	UserID    uint   `json:"userID"`
	Avatar    string `json:"avatar"`
	Nickname  string `json:"nickname"`
	CreatedAt string `json:"createdAt"`
}

type ChatSessionRequest {
	UserID uint   `header:"User-ID"`
	page   int    `form:"page,optional"`
	limit  int    `form:"limit,optional"`
	Key    string `form:"key,optional"`
}

type ChatSession {
	UserID     uint   `json:"userID"`
	Avatar     string `json:"avatar"`
	Nickname   string `json:"nickname"`
	CreatedAt  string `json:"createdAt"` // 消息时间
	MsgPreview string `json:"msgPreview"` // 消息预览
	isTop      bool   `json:"isTop"` // 是否置顶
}

type ChatSessionResponse {
	List  []ChatSession `json:"list"`
	Count int64         `json:"count"`
}

type userTopRequest {
	UserID   uint `header:"User-ID"`
	FriendID uint `json:"friendID"`
}

type userTopResponse {}

type chatDeleteRequest {
	UserID uint   `header:"User-ID"`
	idList []uint `json:"idList"`
}

type chatDeleteResponse {}

type chatRequest {
	UserID uint `header:"User-ID"`
}

type chatResponse {}

service chat {
	@handler chatHistory
	get /api/chat/history (ChatHistoryRequest) returns (ChatHistoryResponse) // 聊天记录 没有使用ChatHistoryResponse

	@handler chatSession
	get /api/chat/session (ChatSessionRequest) returns (ChatSessionResponse) // 最近会话列表

	@handler userTop
	post /api/chat/user_top (userTopRequest) returns (userTopResponse) // 最近会话列表

	@handler chatDelete
	delete /api/chat/chat (chatDeleteRequest) returns (chatDeleteResponse) // 删除聊天记录

	@handler chatHandler
	get /api/chat/ws/chat (chatRequest) returns (chatResponse) // ws的对话
} // 在此文件夹下运行 goctl api go -api chat_api.api -dir . --home ../../template

