syntax = "v1"

type groupCreateRequest {
	UserID     uint   `header:"User-ID"`
	Mode       int8   `json:"mode,optional"` // 模式 1 直接创建模式 2 选人创建模式
	Name       string `json:"name,optional"` // 群聊名字
	IsSearch   bool   `json:"isSearch,optional"`
	Size       int    `json:"size,optional"` // 群规模
	UserIDList []uint `json:"userIdList,optional"` // 用户id列表
}

type groupCreateResponse {}

type groupInfoRequest {
	UserID uint `header:"User-ID"`
	ID     uint `path:"id"` //群id
}

type UserInfo {
	UserID   uint   `header:"User-ID"`
	Avatar   string `json:"avatar"`
	Nickname string `json:"nickname"`
}

type groupInfoResponse {
	GroupID           uint       `json:"groupId"` //群id
	Title             string     `json:"title"` //群名称
	Abstract          string     `json:"abstract"` //群简介
	Avatar            string     `json:"avatar"` //群头像
	Creator           UserInfo   `json:"creator"` //群主
	MemberCount       int        `json:"memberCount"` //群聊用户总数
	MemberOnlineCount int        `json:"memberOnlineCount"` //在线用户数量
	AdminList         []UserInfo `json:"adminList"` //管理员列表
	Role              int8       `json:"role"` // 群角色 1 群主 2 管理员 3 群成员
}

type VerificationQuestion {
	Problem1 *string `json:"problem1,optional" conf:"problem1"`
	Problem2 *string `json:"problem2,optional" conf:"problem2"`
	Problem3 *string `json:"problem3,optional" conf:"problem3"`
	Answer1  *string `json:"answer1,optional" conf:"answer1"`
	Answer2  *string `json:"answer2,optional" conf:"answer2"`
	Answer3  *string `json:"answer3,optional" conf:"answer3"`
}

type groupUpdateRequest {
	UserID               uint                  `header:"User-ID"`
	ID                   uint                  `json:"id"` // 群id
	IsSearch             *bool                 `json:"isSearch,optional" conf:"is_search"` // 是否可以被搜索
	Avatar               *string               `json:"avatar,optional" conf:"avatar"` // 群头像
	Abstract             *string               `json:"abstract,optional" conf:"abstract"` // 群简介
	Title                *string               `json:"title,optional" conf:"title"` // 群名称
	Verification         *int8                 `json:"verification,optional" conf:"verification"` // 群验证
	IsInvite             *bool                 `json:"isInvite,optional" conf:"is_invite"` // 是否可邀请好友
	IsTemporarySession   *bool                 `json:"isTemporarySession,optional" conf:"is_temporary_session"` // 是否可临时会话
	IsProhibition        *bool                 `json:"isProhibition,optional" conf:"is_prohibition"` // 是否全员禁言
	VerificationQuestion *VerificationQuestion `json:"verificationQuestion,optional" conf:"verification_question"`
}

type groupUpdateResponse {}

type groupRemoveRequest {
	UserID uint `header:"User-ID"`
	ID     uint `path:"id"` //群id
}

type groupRemoveResponse {}

type groupMemberRequest {
	UserID uint   `header:"User-ID"`
	ID     uint   `form:"id"` //群id
	Page   int    `form:"page,optional"`
	Limit  int    `form:"limit,optional"`
	Sort   string `form:"sort,optional"`
}

type GroupMemberInfo {
	UserID         uint   `json:"userId"`
	UserNickname   string `json:"userNickname"`
	Avatar         string `json:"avatar"`
	IsOnline       bool   `json:"isOnline"`
	Role           int8   `json:"role"`
	MemberNickname string `json:"memberNickname"`
	CreatedAt      string `json:"createdAt"`
	NewMsgDate     string `json:"newMsgDate"`
}

type groupMemberResponse {
	List  []GroupMemberInfo `json:"list"`
	Count int               `json:"count"`
}

service group {
	@handler groupCreate
	post /api/group/group (groupCreateRequest) returns (groupCreateResponse) // 创建群聊

	@handler groupInfo
	get /api/group/group/:id (groupInfoRequest) returns (groupInfoResponse) // 群信息

	@handler groupUpdate
	put /api/group/groupUpdate (groupUpdateRequest) returns (groupUpdateResponse) // 群更新

	@handler groupRemove
	delete /api/group/group/:id (groupRemoveRequest) returns (groupRemoveResponse) // 群解散

	@handler groupMember
	get /api/group/member (groupMemberRequest) returns (groupMemberResponse) // 群成员列表
} //goctl api go -api group_api.api -dir . --home ../../template

