// Code generated by goctl. DO NOT EDIT.
// Source: user_rpc.proto

package users

import (
	"context"

	"im_server/im_user/user_rpc/types/user_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	IsFriendRequest      = user_rpc.IsFriendRequest
	IsFriendResponse     = user_rpc.IsFriendResponse
	UserCreateRequest    = user_rpc.UserCreateRequest
	UserCreateResponse   = user_rpc.UserCreateResponse
	UserInfo             = user_rpc.UserInfo
	UserInfoRequest      = user_rpc.UserInfoRequest
	UserInfoResponse     = user_rpc.UserInfoResponse
	UserListInfoRequest  = user_rpc.UserListInfoRequest
	UserListInfoResponse = user_rpc.UserListInfoResponse

	Users interface {
		UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserListInfo(ctx context.Context, in *UserListInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error)
		IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	client := user_rpc.NewUsersClient(m.cli.Conn())
	return client.UserCreate(ctx, in, opts...)
}

func (m *defaultUsers) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user_rpc.NewUsersClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUsers) UserListInfo(ctx context.Context, in *UserListInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error) {
	client := user_rpc.NewUsersClient(m.cli.Conn())
	return client.UserListInfo(ctx, in, opts...)
}

func (m *defaultUsers) IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error) {
	client := user_rpc.NewUsersClient(m.cli.Conn())
	return client.IsFriend(ctx, in, opts...)
}
